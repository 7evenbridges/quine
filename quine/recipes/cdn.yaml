version: 1
title: CDN Cache Efficiency By Segment
contributor: https://www.linkedin.com/in/dakgrenier
summary: Real-time computation of CDN cache node efficiency from Fastly CDN logs, with graph association of each log to it’s serving PoP, ASN, asset and cache server, to identify potential root cause of issues.
description: Raw CDN Log data is imported from a .json file via a file ingest, and a node is created for each line. Standing queries map log data into the Quine streaming graph data model, creating graph nodes for each PoP, ASN, cache server and asset. Each of those nodes increments with a counter to track the number of cache hits and misses and calculates hit/miss ratios as data is ingested. Selecting any node (PoP, ASN…) allows you to query for associated ASNs and CDN cache servers to identify potential root cause of poor performance. Thresholds are set to create qualitative ‘state’ properties on each node indicating the health of the component as ‘good,’ ‘warn,’ or ‘alarm.’ Node appearance properties are set to add icons and colors to represent the type of node and it’s ‘state,’ respectively, in the exploration UI.
# Note: Sample data file for this recipe is in the file 'cdn_data_25k.json' which can be accessed at: https://that.re/cdn-data
# Note: This recipe includes numerical thresholds for the hit/miss ratios in each node creation standing query. Change the thresholds as needed to provide the right color indicators for your data!
# Single ingest of line by line data to create individual event nodes for each .json line.
ingestStreams:
  - type: FileIngest
    path: $in_file
    format:
      type: CypherJson
      query: |-
        MATCH (event) 
        WHERE id(event) = idFrom($that) 
        SET event = $that,
          event._type = 'CDN_log_event',
          event:Request
        // Create hour/minute buckets per event
        WITH * CALL reify.time(datetime({date: localdatetime($that.timestamp, "yyyy-MM-dd HH:mm:ss.SSSSSS")}), ["hour","minute"]) YIELD node AS timeNode
        // Count events in buckets
        CALL incrementCounter(timeNode, "count")
        // Create edges for time Nodes
        CREATE (event)-[:at]->(timeNode)
standingQueries:
  # SQ1 - Transform the cache_status field (which contain several possible values) to a simplified "hit" or "miss" value.
  - pattern:
      type: Cypher
      query: |-
        MATCH (event)
        WHERE event._type = 'CDN_log_event' AND event.hit_or_miss is null
        RETURN distinct id(event) as id
      mode: DistinctId
    outputs:
      Hit or Miss:
        type: CypherQuery
        query: |-
          MATCH (event)
          WHERE id(event) = $that.data.id
          SET event.hit_or_miss = CASE event.cache_status
              WHEN 'HIT' THEN 'hit'
              WHEN 'MISS' THEN 'miss'
              WHEN 'HIT-WAIT' THEN 'hit'
              WHEN 'MISS-WAIT' THEN 'miss'
              WHEN 'HIT-CLUSTER' THEN 'hit'
              WHEN 'MISS-CLUSTER' THEN 'miss'
              WHEN 'HIT-WAIT-CLUSTER' THEN 'hit'
              WHEN 'MISS-WAIT-CLUSTER' THEN 'miss'
            ELSE 'other' END
          RETURN null SKIP 1
  # SQ2 - PoP Node Creation
  - pattern:
      type: Cypher
      query: |-
        MATCH (event) 
        WHERE exists(event.pop) AND exists(event.hit_or_miss)
        RETURN DISTINCT id(event) AS id
    outputs:
      PoPs:
        type: CypherQuery
        query: |-
          MATCH (event) 
            WHERE id(event) = $that.data.id 
          MATCH (p) 
            WHERE id(p) = idFrom('PoP', event.pop) 
          //set relationship between event and entity 'pop'
          CREATE (event)-[:requested_to]->(p) 
          SET p.source = event.pop, p.type = 'pop'
          //Set counters for Hit, Miss, and Ratios
          WITH * CALL incrementCounter(p, 'total')
          CALL incrementCounter(p, event.hit_or_miss)
          CALL incrementCounter(p, event.cache_status)
          SET p.Hit_Percent = coalesce((p.hit*1.0)/(p.total*1.0)*100.0, 0.0),
            p.Miss_Percent = coalesce((p.miss*1.0)/(p.total*1.0)*100.0, 0.0),
            p.state = CASE
              //Set threshold ratios below for each of three cases
              WHEN p.Hit_Percent >= 15 THEN 'good'
              WHEN p.Hit_Percent >= 5 AND p.Hit_Percent < 15 THEN 'warn'
              WHEN p.Hit_Percent < 5 THEN 'alarm'
              ELSE 'alarm'
            END
          //Create Node Label
          WITH * CALL create.setLabels(p, [(event.pop), 'PoP']) 
          RETURN null SKIP 1
  # SQ3 - ASN Node creation
  - pattern:
      type: Cypher
      query: |-
        MATCH (event) 
          WHERE exists(event.client_asn) AND exists(event.hit_or_miss)
        RETURN DISTINCT id(event) AS id
    outputs:
      ASNs:
        type: CypherQuery
        query: |-
          MATCH (event) 
            WHERE id(event) = $that.data.id 
          MATCH (a) 
            WHERE id(a) = idFrom('ASN', event.client_asn) 
          CREATE (event)-[:requested_from]->(a) 
          SET a.asn_id = event.client_asn, a.type = 'ASN'
          WITH * CALL incrementCounter(a, 'total')
          CALL incrementCounter(a, event.hit_or_miss)
          SET a.Hit_Percent = coalesce((a.hit*1.0)/(a.total*1.0)*100.0, 0.0),
            a.Miss_Percent = coalesce((a.miss*1.0)/(a.total*1.0)*100.0, 0.0),
            a.state = CASE
              //Set threshold ratios below for each of three cases
              WHEN a.Hit_Percent >= 15 THEN 'good'
              WHEN a.Hit_Percent >= 5 AND a.Hit_Percent < 15 THEN 'warn'
              WHEN a.Hit_Percent < 5 THEN 'alarm'
              ELSE 'alarm'
            END 
          WITH * CALL create.setLabels(a, [toString(event.client_asn), 'ASN_'])
          RETURN null SKIP 1
  # SQ4 - Server Node Creation
  - pattern:
      type: Cypher
      query: |-
        MATCH (event) 
        WHERE exists(event.server_id) AND exists(event.hit_or_miss)
        RETURN DISTINCT id(event) AS id
    outputs:
      Servers:
        type: CypherQuery
        query: |-
          MATCH (event) 
            WHERE id(event) = $that.data.id 
          MATCH (s) 
            WHERE id(s) = idFrom('Server', event.server_id) 
          CREATE (event)-[:targeted_cache]->(s)
          SET s.id = event.server_id, s.Ip = event.server_ip, s.type = 'Server'
          WITH * CALL incrementCounter(s, 'total')
          CALL incrementCounter(s, event.hit_or_miss)
          SET s.Hit_Percent = coalesce((s.hit*1.0)/(s.total*1.0)*100.0, 0.0),
            s.Miss_Percent = coalesce((s.miss*1.0)/(s.total*1.0)*100.0, 0.0),
            s.state = CASE
              //Set threshold ratios below for each of three cases
              WHEN s.Hit_Percent >= 15 THEN 'good'
              WHEN s.Hit_Percent >= 5 AND s.Hit_Percent < 15 THEN 'warn'
              WHEN s.Hit_Percent < 5 THEN 'alarm'
              ELSE 'alarm'
            END
          WITH * CALL create.setLabels(s,[event.server_id])
          RETURN null SKIP 1
  # SQ5 - Asset Node Creation
  - pattern:
      Assets:
      type: Cypher
      query: |-
        MATCH (event) 
        WHERE exists(event.path) AND exists(event.hit_or_miss)
        RETURN DISTINCT id(event) AS id
    outputs:
      Assets:
        type: CypherQuery
        query: |-
          MATCH (event) 
            WHERE id(event) = $that.data.id
          MATCH (ast) 
            WHERE id(ast) = idFrom('Asset', event.path) 
          CREATE (event)-[:req_asset]->(ast) 
          SET ast.id = event.path, ast.Name = event.path, ast.type = 'Asset'
          WITH * CALL incrementCounter(ast, 'total')
          CALL incrementCounter(ast, event.hit_or_miss)
          SET ast.Hit_Percent = coalesce((ast.hit*1.0)/(ast.total*1.0)*100.0, 0.0),
            ast.Miss_Percent = coalesce((ast.miss*1.0)/(ast.total*1.0)*100.0, 0.0)
          WITH * CALL create.setLabels(ast,[event.path])
          SET ast.state = CASE
              //Set threshold ratios below for each of three cases
              WHEN ast.Hit_Percent >= 15 THEN 'good'
              WHEN ast.Hit_Percent >= 5 AND ast.Hit_Percent < 15 THEN 'warn'
              WHEN ast.Hit_Percent < 5 THEN 'alarm'
              ELSE 'alarm'
            END
          RETURN null SKIP 1
  # SQ6 - Relabel Request Nodes with Req-Hit (or -miss)
  - pattern:
      type: Cypher
      query: |-
        MATCH (event) 
        WHERE exists(event.hit_or_miss)
        RETURN DISTINCT id(event) AS id
    outputs:
      assets:
        type: CypherQuery
        query: |-
          MATCH (event) 
            WHERE id(event) = $that.data.id 
          CALL create.setLabels(event, [(event.hit_or_miss), 'Request_'])
          RETURN null SKIP 1
  # SQ7 - Client Node Creation
  - pattern:
      Clients:
      type: Cypher
      query: |-
        MATCH (event) 
        WHERE exists(event.path) and exists (event.hit_or_miss)
        RETURN DISTINCT id(event) AS id
    outputs:
      Clients:
        type: CypherQuery
        query: |-
          MATCH (event)
            WHERE id(event) = $that.data.id 
          MATCH (cli) 
            WHERE id(cli) = idFrom('Client', event.client_ip) 
          //set relationship between event and entity 'client'
          CREATE (event)-[:req_from]->(cli) 
          SET cli.id = event.client_ip, cli.Name = event.client_ip,
            cli.user_agent = event.user_agent, cli.type = 'Client'
          //Set counters for Hit, Miss, and Ratios
          WITH * CALL incrementCounter(cli, 'total')
          CALL incrementCounter(cli, event.hit_or_miss)
          CALL incrementCounter(cli, event.cache_status)
          SET cli.Hit_Percent = coalesce((cli.hit*1.0)/(cli.total*1.0)*100.0, 0.0),
            cli.Miss_Percent = coalesce((cli.miss*1.0)/(cli.total*1.0)*100.0, 0.0)
          //Create Node Label
          WITH * CALL create.setLabels(cli, [toString(event.client_ip), 'Client'])
          RETURN null SKIP 1
nodeAppearances:
  #Pop Icon/color *******************
  - predicate:
      propertyKeys:
        - state
        - type
      knownValues:
        state: "good"
        type: "pop"
    icon: arrow-shrink
    color: "#32a852"
    size: 40.00
  - predicate:
      propertyKeys:
        - state
        - type
      knownValues:
        state: "warn"
        type: "pop"
    icon: arrow-shrink
    color: "#d68400"
    size: 40.00
  - predicate:
      propertyKeys:
        - state
        - type
      knownValues:
        state: "alarm"
        type: "pop"
    icon: arrow-shrink
    color: "#cf151e"
    size: 40.00
  #ASN Icon/color *********************
  - predicate:
      propertyKeys:
        - state
        - type
      knownValues:
        state: "good"
        type: "ASN"
    icon: radio-waves
    color: "#32a852"
    size: 40.00
  - predicate:
      propertyKeys:
        - state
        - type
      knownValues:
        state: "warn"
        type: "ASN"
    icon: radio-waves
    color: "#d68400"
    size: 40.00
  - predicate:
      propertyKeys:
        - state
        - type
      knownValues:
        state: "alarm"
        type: "ASN"
    icon: radio-waves
    color: "#cf151e"
    size: 40.00
  #Server Icon/color *********************
  - predicate:
      propertyKeys:
        - state
        - type
      knownValues:
        state: "good"
        type: "Server"
    icon: navicon-round
    color: "#32a852"
    size: 40.00
  - predicate:
      propertyKeys:
        - state
        - type
      knownValues:
        state: "warn"
        type: "Server"
    icon: navicon-round
    color: "#d68400"
    size: 40.00
  - predicate:
      propertyKeys:
        - state
        - type
      knownValues:
        state: "alarm"
        type: "Server"
    icon: navicon-round
    color: "#cf151e"
    size: 40.00
  #Asset Icon/color *********************
  - predicate:
      propertyKeys:
        - state
        - type
      knownValues:
        state: "good"
        type: "Asset"
    icon: ion-android-film
    color: "#32a852"
    size: 40.00
  - predicate:
      propertyKeys:
        - state
        - type
      knownValues:
        state: "warn"
        type: "Asset"
    icon: ion-android-film
    color: "#d68400"
    size: 40.00
  - predicate:
      propertyKeys:
        - state
        - type
      knownValues:
        state: "alarm"
        type: "Asset"
    icon: ion-android-film
    color: "#cf151e"
    size: 40.00
  #Event Icon/color *********************
  - predicate:
      propertyKeys:
        - hit_or_miss
        - _type
      knownValues:
        hit_or_miss: "hit"
        _type: "CDN_log_event"
    icon: checkmark-circled
    color: "#32a852"
    size: 30.00
  - predicate:
      propertyKeys:
        - hit_or_miss
        - _type
      knownValues:
        hit_or_miss: "miss"
        _type: "CDN_log_event"
    icon: close-circled
    color: "#cf151e"
    size: 30.00
  #Client Icon/color *********************
  - predicate:
      propertyKeys:
        - type
      knownValues:
        type: "Client"
    icon: ion-ios-contact-outline
    color: "#32a852"
    size: 30.00
  # Hours and Minutes
  - predicate:
      propertyKeys:
        - period
      knownValues:
        period: "hour"
    icon: ion-clock
    color: "#32a852"
    size: 40.00
  - predicate:
      propertyKeys:
        - period
      knownValues:
        period: "minute"
    icon: ion-clock
    color: "#32a852"
    size: 20.00  
quickQueries: [ ]
sampleQueries:
  # provide easy access to node types in the exploration ui
  - name: Last 10 Nodes
    query: CALL recentNodes(10)
  - name: PoP Node
    query: MATCH (p) WHERE p.type = 'pop' RETURN p
  - name: ASN Nodes
    query: MATCH (a) WHERE a.type = 'ASN' RETURN a
  - name: Server Nodes
    query: MATCH (s) WHERE s.type = 'Server' RETURN s
  - name: Asset Nodes
    query: MATCH (ast) WHERE ast.type = 'Asset' RETURN ast
